@import 'style/variables';
@import 'style/mixins/clearfix';
@import 'style/mixins/respond';

.make-container(@gutter: @grid-gutter-width) {
  &:extend(.clearfix all);

  margin-right: auto;
  margin-left: auto;
  padding-left: (@gutter / 2);
  padding-right: (@gutter / 2);
}

.make-row(@gutter: @grid-gutter-width) {
  &:extend(.clearfix all);

  margin-left: (@gutter / -2);
  margin-right: (@gutter / -2);
}

.make-col(@columns; @size: small; @gutter: @grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: (@gutter / 2);
  padding-right: (@gutter / 2);

  .respond(@size, {
    float: left;
    width: percentage((@columns / @grid-columns));
  });
}

.make-col-offset(@columns; @size: small) {
  .respond(@size, {
    margin-left: percentage((@columns / @grid-columns));
  });
}

.make-col-push(@columns; @size: small) {
  .respond(@size, {
    left: percentage((@columns / @grid-columns));
  });
}

.make-col-pull(@columns; @size: small) {
  .respond(@size, {
    right: percentage((@columns / @grid-columns));
  });
}

// Grid and grid columns
//
// Mixins that build the classes for a complete grid or the columns.

.make-grid-col(@i, @n) {
  @value: ((@i / @n) * 100%);

  .l-col--@{i} { width: @value; }
  .l-col--pull-@{i} { left: @value; }
  .l-col--push-@{i} { right: @value; }
  .l-col--offset-@{i} { margin-left: @value; }
}

.make-grid-col(@size, @i, @n) {
  @value: ((@i / @n) * 100%);

  .l-col--@{size}-@{i} { width: @value; }
  .l-col--@{size}-pull-@{i} { left: @value; }
  .l-col--@{size}-push-@{i} { right: @value; }
  .l-col--@{size}-offset-@{i} { margin-left: @value; }
}

.make-grid() {
  .loop(@grid-columns);
  .loop(@index) when (@index > 0) {
    .loop((@index - 1));
    .make-grid-col(@index, @grid-columns);
  }
}

.make-grid(@size) {
  .loop(@grid-columns);
  .loop(@index) when (@index > 0) {
    .loop((@index - 1));
    .make-grid-col(@size, @index, @grid-columns);
  }
}
