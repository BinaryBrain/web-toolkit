---
title: BEM
slug: 3bem
template: development.jade
collection: development
status: experimental
---

h2#whatisbem What is BEM?
  a(href='#whatisbem').anchor--docs

p.
  BEM stands for Block, Element Modifier and describes a set of design principles
  for web pages designed at Russian internet giant Yandex.

p.
  We adapted BEM design principles for our CSS and HTML code in the Web Design
  Guide. For every block, element and modifier, we created a css class.

p.
  This is a quick overview over BEM and how we adapted it. If you want to take
  a deep dive head over to
  <a href="https://bem.info/method/definitions/" title="bem.info">bem.info</a>.

blockquote.callout.
  We recommend using the same principles for your app, to enhance integration
  of the Web Design Guide and enhance your web development expirience.

h2#blocks Blocks
  a(href='#blocks').anchor--docs

p.
  A page consists of several blocks, such as header, footer, menu and more.

p.
  Blocks are always independent. This means that they could appear anywhere on
  any page or even multiple times on the same page. For example a menu block may
  appear once on top of the page and once on the side to create a two step
  navigation.

p.
  Blocks can contain elements and also other nested blocks to reuse
  functionality and minimize complexity. A block describes the order
  in which it's children appear.

h2#elements Elements
  a(href='#elements').anchor--docs

p.
  Elements are always part of a block and are thus context dependent.
  They can not exist on their own.
p.
  For example, a menu item can only exist inside a menu. Makes sense, right?

h2#modifiers Modifiers
  a(href='#modifiers').anchor--docs

p.
  Modifiers define the styling of a block or element. Every modifier has it's
  own CSS class. This way you can use a menu block for a top navigation, and
  another for a side navigation and give them both the appropriate styling.

p.
  Multiple modifiers in a block or element are allowed.

h2#naming Naming
  a(href='#naming').anchor--docs

p.
  Block names must be unique within the project and element names must be unique
  within their block.
  We separate nested blocks and elements with the <code>__</code>
  (double lower dash) sequence and modifiers from blocks and elements with the
  <code>--</code> (double dash) sequence.

blockquote.callout.
  Don't use names in your app, that are already used by the Web Design Guide.

h2#independentcss Independent CSS
  a(href='#independentcss').anchor--docs

p.
  To achieve block independence, so that blocks can be on their own and anywhere
  on a page, we follow the following rules in our CSS definitions:

.callout.callout--danger
  ul
    li.
      HTML elements (<code>h1</code>, <code>p</code>, <code>div</code>)
      <strong>must not</strong> be used in CSS selectors.
    li.
      Cascading selectors (<code>.menu.menu--item { ... }</code>)
      <strong>should not</strong> be used.
    li.
      ID based selectors (<code>#menu { ... }</code>) <strong>must not</strong>
      be used.


h2#javascript Javascript
  a(href='#independentcss').anchor--docs

p.
  You should apply behaviour with javascript on block level. Use CSS classes to
  select every instance of a block on your page.

p.
  If you have the need, you can also write a Javascript libraray to easily
  access blocks and elements.
