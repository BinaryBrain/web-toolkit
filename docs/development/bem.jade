---
title: BEM
slug: bem
template: development.jade
collection: development
status: experimental
---

h2#whatisbem What is BEM?
  a(href='#whatisbem').anchor--docs

p.
  BEM stands for Block, Element Modifier and describes a set of design principles
  for web pages designed at Russian internet giant Yandex.

p.
  We adapted BEM design principles for our CSS and HTML code in the Web Design
  Guide. For every block, element and modifier, we created a css class.

p.
  This is a quick overview over BEM and how we adapted it. If you want to take
  a deep dive head over to
  <a href="https://bem.info/method/definitions/" title="bem.info">bem.info</a>.

blockquote.callout.
  We recommend using the same principles for your app, to enhance integration
  of the Web Design Guide.

h2#blocks Blocks
  a(href='#blocks').anchor--docs

p.
  A page consists of several blocks, such as header, footer, menu and more.
  Blocks are always independent. This means that they could appear anywhere on
  any page.
  Blocks can appear multiple times on a page. For navigation a menu block may
  appear on top of the page and one on the side.
  Blocks can contain other nested blocks and elements and they describe the order
  in which their children appear.

h2#elements Elements
  a(href='#elements').anchor--docs

p.
  Elements are always part of a block and are thus context dependent.
  For example, a menu item can not exist without a menu.

h2#modifiers Modifiers
  a(href='#modifiers').anchor--docs

p.
  Modifiers define the styling of a block or element. This way you can use
  a menu block for a top navigation, and one for a side navigation and give
  them both the appropriate styling.
  Multiple modifiers in a block or element are allowed.

h2#naming Naming
  a(href='#naming').anchor--docs

p.
  Block names must be unique within the project and element names must be unique
  within their block.
  We separate nested blocks and elements with the <code>__</code>
  (double lower dash) sequence and modifiers from blocks and elements with the
  <code>--</code> (double dash) sequence.

blockquote.callout.
  Don't use names in your app, that are already used by the Web Design Guide.

h2#independentcss Independent CSS
  a(href='#independentcss').anchor--docs

p.
  To achieve block independence, so that blocks can be on their own and anywhere
  on a page, we follow the following rules in our CSS definitions:

.callout.callout--danger
  ul
    li.
      HTML elements (<code>h1</code>, <code>p</code>, <code>div</code>)
      <em>must not</em> be used in CSS selectors.
    li.
      Cascading selectors (<code>.menu.menu--item { ... }</code>)
      <em>should</em> be avoided.
    li.
      ID based selectors (<code>#menu { ... }</code>) <em>must not</em> be
      used.


h2#javascript Javascript
  a(href='#independentcss').anchor--docs

p.
  You should apply behaviour with javascript on block level. Use CSS classes to
  select every instance of a block on your page.

p.
  If you have the need, you can also write a Javascript libraray to easily
  access blocks and elements.
